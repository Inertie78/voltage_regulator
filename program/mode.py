import data

class Mode:
    def __init__(self, current_time):
        """
        Initialise l'√©tat de la batterie et enregistre le temps de la derni√®re charge.
        """
        self.etatBattery = False
        self.last_charge_bat = current_time

    def get_voltage(self):
        """
        R√©cup√®re la tension actuelle mesur√©e par le multim√®tre.
        """
        return data.multi_dict[0]['psu_voltage']

    def update_relays(self, rs_01, rs_02, rs_03=None):
        """
        Met √† jour l'√©tat des relais.
        - rs_01, rs_02, rs_03 : bool√©ens (True = activ√©, False = d√©sactiv√©)
        """
        data.dict_relay["rs_01"] = rs_01
        data.dict_relay["rs_02"] = rs_02
        if rs_03 is not None:
            data.dict_relay["rs_03"] = rs_03

    def checkBattery(self, current_time):
        """
        V√©rifie l'√©tat de la batterie en fonction de la tension mesur√©e et du temps √©coul√© depuis la derni√®re charge.
        Retourne un tuple (message, rs_01, rs_02) :
        - message : √©tat de la batterie (texte)
        - rs_01, rs_02 : √©tat des relais associ√©s √† la batterie
        """
        voltage = self.get_voltage()

        # Si la tension est faible ou si on est d√©j√† en mode "batterie en contr√¥le"
        if voltage <= data.MIN_CONSO_TENSION or self.etatBattery:
            self.etatBattery = True
            temps_depuis_charge = current_time - self.last_charge_bat

            # Phase de contr√¥le batterie
            if temps_depuis_charge < data.TIME_CHECK_BAT:
                data.bool_mode = True
                data.multimetre_count = 0
                relay_01, relay_02 = False, True

                if voltage <= data.MIN_BATTERY_TENSION:
                    return "‚ö†Ô∏è Erreur sur la batterie, veuillez la contr√¥ler", relay_01, relay_02

                if voltage >= data.MAX_BATTERY_TENSION:
                    self.etatBattery = False

                return "üîç Batterie en contr√¥le", relay_01, relay_02

            elif temps_depuis_charge < 2 * data.TIME_CHARGE_BAT:
                data.bool_mode = False
                return "üîã Batterie en charge", True, True

            else:
                self.last_charge_bat = current_time
                return "üîã Batterie en charge", True, True

        else:
            data.bool_mode = True
            data.multimetre_count = 0
            return "‚úÖ Batterie pleine", False, True

    def overheat(self):
         """
        V√©rifie la temp√©rature du syst√®me.
        Si elle d√©passe la limite de s√©curit√©, retourne un tuple
        (message, rs_01, rs_02, rs_03) avec tous les relais d√©sactiv√©s.
        Sinon, retourne None.
        """
        if data.temp_dict['temperature'] is not None and data.temp_dict['temperature'] >= data.MAX_SECURITY_TEMPERATURE:
            self.update_relays(False, False, False)
            return "üî• Temp√©rature trop √©lev√©e"
        return None

    def protect(self, current_time):
         """
        Mode PROTECTION :
        - V√©rifie la batterie (checkBattery)
        - Inverse volontairement les relais (rs_02, rs_01)
        - V√©rifie la temp√©rature (overheat)
        Retourne toujours (message, rs_01, rs_02, rs_03).
        """
        message, rs_01, rs_02 = self.checkBattery(current_time)
        self.update_relays(rs_02, rs_01)
        temp_message = self.overheat()
        return temp_message if temp_message else message

    def conso(self, current_time):
         """
        Mode CONSOMMATION :
        - V√©rifie la batterie (checkBattery)
        - Applique les relais tels quels (rs_01, rs_02)
        - V√©rifie la temp√©rature (overheat)
        Retourne toujours (message, rs_01, rs_02, rs_03).
        """
        message, rs_01, rs_02 = self.checkBattery(current_time)
        self.update_relays(rs_01, rs_02)
        temp_message = self.overheat()
        return temp_message if temp_message else message

    def observ(self):
         """
        Mode OBSERVATION :
        - Active en permanence rs_01 et rs_02
        - V√©rifie la temp√©rature (overheat)
        Retourne toujours (message, rs_01, rs_02, rs_03).
        """
        self.update_relays(True, True)
        return self.overheat()
